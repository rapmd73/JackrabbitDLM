#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Jackrabbit DLM (Distributed Lock Manager)
# 2021 Copyright © Robert APM Darin
# All rights reserved unconditionally.

# This code is a program designed to manage locks and data storage in a system.
# It allows users to lock and unlock resources, as well as store, retrieve, and
# erase data associated with those resources. The program operates by listening
# for incoming requests on a specific port, processing these requests based on
# the actions specified (like locking or unlocking), and maintaining a record
# of active locks and their expiration times.

# When a user sends a request, the program checks if it’s valid and whether the
# requester has permission to perform the action. If everything checks out, it
# updates its records accordingly. The program also keeps track of various
# statistics related to its operations, such as how many requests it has
# handled or if there have been any errors.

# Additionally, it logs important events for monitoring purposes and manages
# memory efficiently by cleaning up expired locks or unused data. Overall, this
# code serves as an efficient tool for coordinating access to shared resources
# while ensuring that only authorized users can manipulate them.

# For (un)locking

# { "ID":"DEADBWEEF", "FileName":"testData", "Action":"Lock", "Expire":"300" }
# { "ID":"DEADBWEEF", "FileName":"testData", "Action":"Unlock" }

# For memory reference

# { "ID":"DEADBWEEF", "FileName":"testData", "Action":"Get" }
# { "ID":"DEADBWEEF", "FileName":"testData", "Action":"Put", "Expire":"300","DataStore":"Blah" }
# { "ID":"DEADBWEEF", "FileName":"testData", "Action":"Erase" }

import sys
sys.path.append('/home/JackrabbitDLM')
import os
import gc
import time
from datetime import datetime
import socket
import select
import json

Version="0.0.0.0.130"
BaseDirectory='/home/JackrabbitDLM'
LogDirectory="/home/JackrabbitDLM/Logs"

# Statistics

Statistics={}

# Required global for the process to work

Locker={}

# Write pid in port file

def WritePID(port):
    fn=LogDirectory+'/'+str(port)+'.pid'
    f = open(fn, "w")
    f.write(str(os.getpid()))
    f.close()

# Write log entry

def WriteLog(msg):
    time=(datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f'))

    s=f'{time} {msg}\n'

    fh=open(LogDirectory+'/JackrabbitDLM.log','a')
    fh.write(s)
    fh.close()

# Convience to build the status and a json payload

def jsonStatus(str,id=None,Tag=None,Data=None):
    res={}
    res['Status']=str

    if id!=None:
        res['ID']=id

    if Tag!=None and Data!=None:
        res[Tag]=Data

    return json.dumps(res)+'\n'

# Process the payload and carry out each of the desired functionalities.

# Lock and DataStore MUST be different. Unlock REMOVES data is the same.

def ProcessPayload(data):
    global Statistics
    global Locker

    try:
        dataDB=json.loads(data)
    except: # damaged payload
        Statistics['BadPayload']=Statistics.get('BadPayload',0)+1
        return jsonStatus("BadPayload")
    else: # Find the lock

        # FileName and Action are required. For memory fetches, FileName is memory ID.

        if 'FileName' not in dataDB \
        or 'Action' not in dataDB \
        or 'ID' not in dataDB \
        or 'Expire' not in dataDB:
            Statistics['BadPayload']=Statistics.get('BadPayload',0)+1
            return jsonStatus("BadPayload")

        # Valid actions:
        #    Lock
        #    Unlock
        #    Get
        #    Put
        #    Erase

        # What are we doing. FileName also doubles as memory ID
        FileName=dataDB['FileName']
        action=dataDB['Action'].lower()

        # Handle the LOCK action. This allows an advisory locking method that should
        # work on any platform. Locking/Unlocking can be used as a rate limiter as
        # well.

        if action=='lock':
            # New lock request
            if FileName not in Locker:
                dataLock={}
                dataLock['ID']=dataDB['ID']
                dataLock['Expire']=time.time()+float(dataDB['Expire'])
                Locker[FileName]=dataLock
                Statistics['Lock']=Statistics.get('Lock',0)+1
                return jsonStatus("Locked",Locker[FileName]['ID'])
            # Lock has expired, now unlocked
            elif time.time()>Locker[FileName]['Expire']:
                Locker[FileName]['ID']=dataDB['ID'] # assign the new ID
                Locker[FileName]['Expire']=time.time()+float(dataDB['Expire'])
                Statistics['Expired']=Statistics.get('Expired',0)+1
                Statistics['Lock']=Statistics.get('Lock',0)+1
                return jsonStatus("Locked",Locker[FileName]['ID'])
            # The current owner want the lock reset to a specific duration/held longer
            elif Locker[FileName]['ID']==dataDB['ID']:
                Locker[FileName]['Expire']=time.time()+float(dataDB['Expire'])
                Statistics['Relock']=Statistics.get('Relock',0)+1
                return jsonStatus("Locked",Locker[FileName]['ID'])
            # Lock access by a non-owner ID
            else:
                Statistics['NotOwner']=Statistics.get('NotOwner',0)+1
                return jsonStatus("NotOwner")
        # Unlock request
        elif action=='unlock':
            # Just pass through unlock
            if FileName not in Locker:
                Statistics['UnlockNF']=Statistics.get('UnlockNF',0)+1
                return jsonStatus("Unlocked")
            # Verify owner and unlock
            elif Locker[FileName]['ID']==dataDB['ID']:
                if Locker[FileName]['Expire']>0:
                    Statistics['Unlock']=Statistics.get('Unlock',0)+1
                Locker[FileName]['Expire']=0
                return jsonStatus("Unlocked",Locker[FileName]['ID'])
            # Unock access by a non-owner ID. This may seem idiotic, but its an
            # absolute for keeping the lock from being hijacked.
            else:
                Statistics['NotOwner']=Statistics.get('NotOwner',0)+1
                return jsonStatus("NotOwner")
        # Get memory reference
        elif action=='get':
            # Memory item doesn't exist
            if FileName not in Locker:
                Statistics['GetNF']=Statistics.get('GetNF',0)+1
                return jsonStatus("NotFound")
            # Verify owner of data
            elif Locker[FileName]['ID']==dataDB['ID']:
                if 'DataStore' in Locker[FileName]:
                    Statistics['Get']=Statistics.get('Get',0)+1
                    return jsonStatus("Done",Locker[FileName]['ID'],Tag="DataStore",Data=Locker[FileName]['DataStore'])
                else:
                    Statistics['GetNF']=Statistics.get('GetNF',0)+1
                    return jsonStatus("NoData",Locker[FileName]['ID'])
            # Not the rightful owner
            else:
                Statistics['NotOwner']=Statistics.get('NotOwner',0)+1
                return jsonStatus("NotOwner")
        elif action=='put':
            # New memory object
            if FileName not in Locker:
                dStore={}
                dStore['ID']=dataDB['ID']
                dStore['Expire']=time.time()+float(dataDB['Expire'])
                dStore['DataStore']=dataDB['DataStore']
                Locker[FileName]=dStore
                Statistics['PutNew']=Statistics.get('PutNew',0)+1
                return jsonStatus("Done",Locker[FileName]['ID'])
            # Existing memory object, verify owner and reset expiration timeout
            elif Locker[FileName]['ID']==dataDB['ID']:
                Locker[FileName]['Expire']=time.time()+float(dataDB['Expire'])
                Locker[FileName]['DataStore']=dataDB['DataStore']
                Statistics['PutUpdate']=Statistics.get('PutUpdate',0)+1
                return jsonStatus("Done",Locker[FileName]['ID'])
            # Not the rightful owner
            else:
                Statistics['NotOwner']=Statistics.get('NotOwner',0)+1
                return jsonStatus("NotOwner")
        # Erase request
        elif action=='erase':
            # Just pass through erase
            if FileName not in Locker:
                Statistics['EraseNF']=Statistics.get('EraseNF',0)+1
                return jsonStatus("NotFound")
            # Verify owner and erase memory. Erase is just resetting expiration to 0.
            # Will be remove in main function.
            elif Locker[FileName]['ID']==dataDB['ID']:
                Locker[FileName]['Expire']=0
                Locker[FileName]['DataStore']=None
                Statistics['Erased']=Statistics.get('Erased',0)+1
                return jsonStatus("Done",Locker[FileName]['ID'])
            # Not the rightful owner
            else:
                Statistics['NotOwner']=Statistics.get('NotOwner',0)+1
                return jsonStatus("NotOwner")
        # Wrong key
        else:
            Statistics['BadAction']=Statistics.get('BadAction',0)+1
            return jsonStatus("BadAction")

###
### Main Driver
###

def main():
    global Statistics
    global Locker

    OldHour=-1

    WriteLog(f"Jackrabbit DLM {Version}")

    host=''
    port=37373

    if len(sys.argv)>1:
        host=sys.argv[1]
    if len(sys.argv)>2:
        port=int(sys.argv[2])

    # Data storage for incoming payloads
    dataStore={}

    WritePID(port)

    # Open the port.

    try:
        lockerSocket=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        lockerSocket.setblocking(0)
        lockerSocket.bind((host, port))
        lockerSocket.listen(1024)
    except OSError as err:
        x=str(err)
        if x.find('Address already in use')>-1:
            x='Another program is using this port: '+str(port)
        WriteLog(x)
        sys.exit(1)

    # Track incoming connections

    inputs=[lockerSocket]

    # Response queue connected to each client

    queue={}

    # The main loop of the program.

    while True:
        infds,outfds,errfds=select.select(inputs, inputs, [], 30)

        if len(infds)!=0:
            Statistics['AIn']=len(infds)
            for fds in infds:
                # Inbound requests processed
                Statistics['In']=Statistics.get('In',0)+1
                if fds is lockerSocket:
                    # Get new connection
                    clientsock,clientaddr=fds.accept()
                    clientsock.setblocking(0)
                    if clientsock not in inputs:
                        inputs.append(clientsock)
                    dataStore[clientsock]=''
                else:
                    data=None
                    try:
                        data=fds.recv(1024)
                    except:
                        # Sleep based upon server load
                        time.sleep(1)

                    # No data received, close connection, clean up and sleep

                    if not data or data==None:
                        if fds in dataStore:
                            dataStore.pop(fds,None)
                        if fds in inputs:
                            inputs.remove(fds)
                        if fds in queue:
                            queue.pop(fds,None)
                        fds.close()
                    else:
                        # Collect the entire line.
                        data=data.decode()
                        dataStore[fds]+=data
                        if data[-1]=='\n':
                            queue[fds]=ProcessPayload(dataStore[fds])

        # Send response and close connection

        if len(outfds)!=0:
            Statistics['AOut']=len(outfds)
            for fds in outfds:
                # Outbound requests processed
                Statistics['Out']=Statistics.get('Out',0)+1
                if fds in queue:
                    try:
                        fds.sendall(queue[fds].encode())
                    except:
                        if fds in dataStore:
                            dataStore.pop(fds,None)
                        if fds in inputs:
                            inputs.remove(fds)
                        fds.close()
                    queue.pop(fds,None)

        # Clean up memory list

        # Active Locks/Data
        Statistics['ALock']=0
        Statistics['AData']=0

        now=time.time()
        for k in list(Locker):
            if now>Locker[k]['Expire']:
                if Locker[k]['Expire']>0:
                    Statistics['ExpiredData']=Statistics.get('ExpiredData',0)+1
                else:
                    if Locker[k]['Expire']>0:
                        Statistics['ExpiredLock']=Statistics.get('ExpiredLocked',0)+1
                Locker.pop(k,None)
            # For accuracy, must be after possible removal
            if k in Locker:
                if 'DataStore' in Locker[k]:
                    Statistics['AData']+=1 #=Statistics.get('AData',0)+1
                else:
                    Statistics['ALock']+=1 #=Statistics.get('ALock',0)+1

        ct=datetime.now()
        if ct.hour!=OldHour and len(Statistics)>0:
            OldHour=ct.hour

            s=', '.join(f"{k}: {v}" for k,v in sorted(Statistics.items()) if v>0)
            WriteLog(s)
            Statistics={}

        # Long term memory management
        gc.collect()

if __name__ == '__main__':
    main()
